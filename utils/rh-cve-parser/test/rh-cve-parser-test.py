import unittest
import sys

sys.path.insert(0, "../src")

target = __import__("rh-cve-parser")


class TestFetch(unittest.TestCase):

    def test_collection(self):
        collection = target.CVECollector(True)
        c = collection.collect()
        self.assertIsNotNone(collection)
        self.assertIsNotNone(c)

    def test_extractor_nomatch(self):
        test_set = []
        test_object = {"CVE": "CVE1", "severity": "CVE1", "bugzilla_description": "CVE1", "affected_packages": []}

        test_set.append(test_object)
        extractor = target.OpenShiftCVEExtractor(test_set)
        table = extractor.extract()
        self.assertIsNotNone(table)

        self.assertEqual(len(table), 65, "Should have no matched names")

    def test_extractor_match_one(self):
        test_set = []
        test_object = {"CVE": "CVE1", "severity": "CVE1", "bugzilla_description": "CVE1",
                       "affected_packages": ["openshift4 4.10"]}

        test_set.append(test_object)
        extractor = target.OpenShiftCVEExtractor(test_set)
        table = extractor.extract()
        self.assertIsNotNone(table)
        print(table)
        self.assertEqual(len(table), 98, "Should have one matched name")

    def test_extractor_match_one_out_of_more(self):
        test_set = []
        test_object = {"CVE": "CVE1", "severity": "CVE1", "bugzilla_description": "CVE1",
                       "affected_packages": ["openshift4 4.10", "openshift3 3.11"]}

        test_set.append(test_object)
        extractor = target.OpenShiftCVEExtractor(test_set)
        table = extractor.extract()
        self.assertIsNotNone(table)
        print(table)
        self.assertEqual(len(table), 118, "Should have one matched name")


if __name__ == "__main__":
    unittest.main()
